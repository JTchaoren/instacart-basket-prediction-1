#!/usr/bin/env python
"""mostly cribbed from script of same name up one level"""
from __future__ import division
import random
import argparse

import hypers

hp_exploration_cands = dict(

    # (special-cased below)
    #weight = [True, False],
    #soft_weights = [True, False],
    train_file = ['train', 'train_5'],

    # 0.01 seems ridiculously low. Others seem reasonable.
    eta = [0.05, 0.1, 0.2, 0.3, 0.5],
    # (0 = no limit, and implies lossguide grow_policy)
    max_depth = [0, 4, 5, 6, 6, 7, 7, 8, 8, 10, 10, 12, 14, 16],
    min_child_weight = [0.5, 1, 2.5, 5, 7.5, 10, 15, 20],
    gamma = [0, 0.1, 0.33, .7, 1.2, 2.4, 4.8],
    subsample = [0.2, 0.5, 0.66, 0.8, 0.9, 1.0],
    colsample_bytree = [0.3, 0.5, 0.7, 0.85, 0.95, 1.0],
    colsample_bylevel = [0.3, 0.5, 0.85, 1.0],
    reg_lambda = [0.01, 0.1, 1, 10, 30],
    alpha = [0, 1e-06, 1e-05, 1e-04, 1e-03],
    max_delta_step = {0: .9, 1: .05, 10: .05},
    # Exact seems really good! And not all *that* slow.
    # XXX
    tree_method = {'approx': .1, 'hist': 0.1, 'exact': .8},
    # Failed experiment
    #scale_pos_weight = {1: .9, 2: .05, 10: .05},
    grow_policy = {'depthwise': .95, 'lossguide': 0.05},
)

def _sample_dict(hp_dict):
  acc = 0
  x = random.random()
  for (value, prob) in hp_dict.iteritems():
    acc += prob
    if x < acc:
      return value

  assert False

def randtag():
  # Totally an excellent use of my time.
  letters = map(chr, range(ord('a'), ord('z')+1))
  vowels = 'aeiou'
  verboten = 'qhjy'
  consonants = [l for l in letters if l not in vowels and l not in verboten]
  x = vowels+'s'
  followers = dict(b=x, c=x+'htk', d=x, f=x+'tf', g=x+'h', k=x, l=x+'lntkgdbm', m=x+'m', n=x+'dgknptxz', p=x+'tph', r=x+'bcdfgkmnptyz', s=x+'hkpst', t=x+'hy', v=x, w=x+'bdfgklmnp',
      x='aeioxty', z='aeiouyzl')
  a = random.choice(consonants)
  b = random.choice(vowels)
  c = random.choice(consonants)
  d = random.choice(followers[c])
  return a+b+c+d



def sample_hps():
  id = randtag()
  #id = ''.join(chr(random.randint(ord('a'), ord('z'))) for _ in range(4))
  hps = hypers.get_default_hparams()
  for param, cands in hp_exploration_cands.iteritems():
    if isinstance(cands, list):
      value = random.choice(cands)
    elif isinstance(cands, dict):
      value = _sample_dict(cands)
    else:
      assert False
    setattr(hps, param, value)

  # Hackety hack
  x =random.random()
  if x < .3:
    hps.onehot_vars = [None, 'pid', 'aisleid', 'deptid']
  elif x < .6:
    hps.onehot_vars = [None, 'aisleid', 'deptid']
  else:
    hps.onehot_vars = [None]

  # More hack (just so we don't get confusing configurations where
  # soft_weights=True but weight=False. Makes it trickier to infer
  # effect of soft weights)
  x = random.random()
  if x < 1/3:
    hps.weight = False
    hps.soft_weights = False
  elif x < 2/3:
    hps.weight = True
    hps.soft_weights = False
  else:
    hps.weight = True
    hps.soft_weights = True
    

  # more hack
  if hps.max_depth == 0:
    hps.grow_policy = 'lossguide'
    hps.max_leaves = random.choice([1, 2, 4, 8, 16, 32])
  if hps.grow_policy == 'lossguide':
    hps.tree_method = 'hist'
  if hps.tree_method == 'hist':
    hps.max_bins = random.choice([64, 128, 256, 256, 256, 384])

  tag = id
  return hps, tag

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('-n', type=int, default=10)
  parser.add_argument('--n-rounds', type=int, default=150)
  parser.add_argument('--prefix', default='x', help='string prepended to all autogenerated tags')
  args = parser.parse_args()

  for _ in range(args.n):
    hps, tag = sample_hps()
    tag = '{}_{}'.format(args.prefix, tag)
    hps.rounds = args.n_rounds
    hps.early_stopping_rounds = 10
    hypers.save_hps(tag, hps)
    print tag

if __name__ == '__main__':
  main()

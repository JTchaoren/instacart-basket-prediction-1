"""A bunch of helpers, so far all having to do with finding the paths for things.
"""
import os
import pickle
import tensorflow as tf

_thisdir = os.path.dirname(__file__)
ROOT = os.path.realpath(os.path.join(_thisdir, '..'))

DATA_DIR = os.path.join(ROOT, 'dat')
PDICT_DIR = os.path.join(DATA_DIR, 'pdicts')
USER_PB_DIR = os.path.join(DATA_DIR, 'user_pbs')
VECTOR_DIR = os.path.join(DATA_DIR, 'vectors')

CONFIG_DIR = os.path.join(ROOT, 'configs')

LOG_DIR = os.path.join(ROOT, 'logs')

CHECKPOINT_DIR = os.path.join(ROOT, 'checkpoints')

# Other options are ZLIB and NONE
VECTOR_COMPRESSION_NAME = 'GZIP'
VECTOR_COMPRESSION_TYPE = getattr(tf.python_io.TFRecordCompressionType, 
    VECTOR_COMPRESSION_NAME)

def resolve_recordpath(recordpath):
  if '/' in recordpath:
    # Hope you know what you're doing
    return recordpath
  ext = '.tfrecords'
  if not recordpath.endswith(ext):
    recordpath += ext
  return os.path.join(USER_PB_DIR, recordpath)

def resolve_vector_recordpath(recordpath):
  if '/' in recordpath:
    # Hope you know what you're doing
    return recordpath
  ext = '.tfrecords'
  if not recordpath.endswith(ext):
    recordpath += ext
  return os.path.join(VECTOR_DIR, recordpath)

def logdir_for_tag(tag):
  return os.path.join(LOG_DIR, tag)

def csv_path(basename):
  if not basename.endswith('.csv'):
    basename += '.csv'
  return os.path.join(DATA_DIR, 'csv', basename)

# Helpers for loading 'pdicts': mappings from uid to pid to predicted probability
# generated by some model for some set of users.
def pdict_for_tag(tag, recordfile):
  path = _path_for_pdict(tag, recordfile)
  with open(path) as f:
    return pickle.load(f)

def save_pdict_for_tag(tag, pdict, recordfile):
  path = _path_for_pdict(tag, recordfile)
  with open(path, 'w') as f:
    pickle.dump(dict(pdict), f)

def _path_for_pdict(tag, recordfile):
  ext = '.tfrecords'
  if recordfile.endswith(ext):
    recordfile = recordfile[:-len(ext)]
  assert '/' not in recordfile
  # 'test' is our test stratum, and the one we most commonly generate
  # predictions for.
  if recordfile != 'test':
    tag += '_{}'.format(recordfile)
  pickle_basename = '{}.pickle'.format(tag)
  return os.path.join(PDICT_DIR, pickle_basename)

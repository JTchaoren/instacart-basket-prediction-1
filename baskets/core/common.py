"""A bunch of helpers, so far all having to do with finding the paths for things.
"""
import os

ROOT = os.path.realpath('../..')

DATA_DIR = os.path.join(ROOT, 'dat')
PDICT_DIR = os.path.join(DATA_DIR, 'pdicts')

CONFIG_DIR = os.path.join(ROOT, 'configs')

LOG_DIR = os.path.join(ROOT, 'logs')

def logdir_for_tag(tag):
  return os.path.join(LOG_DIR, tag)

def csv_path(basename):
  if not basename.endswith('.csv'):
    basename += '.csv'
  return os.path.join(DATA_DIR, 'csv', basename)

# Helpers for loading 'pdicts': mappings from uid to pid to predicted probability
# generated by some model for some set of users.
def pdict_for_tag(tag, recordfile):
  path = _path_for_pdict(tag, recordfile)
  with open(path) as f:
    return pickle.load(f)

def save_pdict_for_tag(tag, pdict, recordfile):
  path = _path_for_pdict(tag, recordfile)
  with open(path, 'w') as f:
    pickle.dump(dict(pdict), f)

def _path_for_pdict(tag, recordfile):
  ext = '.tfrecords'
  if recordfile.endswith(ext):
    recordfile = recordfile[:-len(ext)]
  assert '/' not in recordfile
  # 'test' is our test stratum, and the one we most commonly generate
  # predictions for.
  if recordfile != 'test':
    tag += '_{}'.format(recordfile)
  pickle_basename = '{}.pickle'.format(tag)
  return os.path.join(PDICT_DIR, pickle_basename)
